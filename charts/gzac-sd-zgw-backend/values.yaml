## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

image:
  registry: "crzgwpweu01.azurecr.io"
  repository: "zgw/gzac-sd-zgw-backend"
  tag: latest
  fullImage: [] # use this from pipeline, includes registry, repo and tag
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

## Specifies the application name (required to be set)
##
name: "gzac-sd-zgw-backend"

## Specfies the required replicas
##
replicaCount: 1

## Specifies the application resource kind
##
appKind: Deployment

##
##
args: []
command: ["java","-XX:MinRAMPercentage=20.0","-XX:MaxRAMPercentage=80.0","-XshowSettings:vm","-Djava.security.egd=file:/dev/./urandom","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","-jar","/app.war"]
## String to partially override common.names.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override common.names.fullname template
##
# fullnameOverride:

## Deployment pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []

## Controls whether the pod may use the node network namespace. 
## ref: https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces
hostNetwork: false

## Controls whether the container automatically mounts the ServiceAccount's API credentials
## In the pod/v1 this defaults to true, so also in this helm chart. recommended: false
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
automountServiceAccountToken: false

serviceAccount:
  ## Specifies whether a service account should be created
  ##
  create: false
  ## Annotations to add to the service account
  ##
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:
  ## Controls whether the container automatically mounts the ServiceAccount's API credentials
  ## In the serviceaccount/v1 this defaults to true, so also in this helm chart. recommended: false
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
  automountServiceAccountToken: true

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Extra labels to add to Pod
##
podLabels: {}

## Add init containers to the pod
##
initContainers: []
## e.g.
# - name: your-image-name
# image: your-image
# imagePullPolicy: Always
# ports:
# - name: portname
#   containerPort: 1234


## priorityClassName
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
##
priorityClassName: ''

## Optionally, change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
## By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
## to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
##
dnsPolicy: ClusterFirst

## Pod securityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

## Container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
## containerSecurityContext:
##   capabilities:
##     drop:
##     - ALL
##   readOnlyRootFilesystem: true
##   runAsNonRoot: true
##   runAsUser: 1001
##   allowPrivilegeEscalation: false
##
containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
## Application container ports definitions (for use with service.ports)
##
## containerPorts:
##   - name: http
##     containerPort: 8080
##     protocol: TCP
containerPorts: []

## Application service parameters
##
service:
  ## Kubernetes service type and port number
  ##
  type: ClusterIP
  # clusterIP: None

  ## Specify the default service port and targetPort
  ## Note: port or ports must be provided to enable service!
  ##
  port: 8080
  targetPort: 8080

  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort: 30080

  ## Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  # loadBalancerIP:

  ## Load Balancer sources
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

  ## Provide any additional service annotations
  ##
  annotations: {}

  ## Provide any additional service labels
  ##
  labels: {}

  ## Expose additional ports
  ##
  # ports:
  # -
  #   name: http
  #   port: 80
  #   targetPort: http
  # -
  #   name: http
  #   port: 8080
  # -
  #   name: http
  #   port: 8080
  # -
  #   name: http
  #   port: 8080
  #   nodePort: 30080
  ports: []

## Add a simple sidecar to this deployment
##
## sidecar:
##  name: netshoot
##  repository: nicolaka/netshoot
##  tag: latest
##  args:
##  - sleep
##  - '999'
##  containerSecurityContext:
##   enabled: false
##    runAsNonRoot: false
##    allowPrivilegeEscalation: true
##    capabilities:
##      add:
##      - NET_ADMIN
##      - NET_RAW
sidecar: {}

## Set up update strategy for Kibana installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to makesure the pods are destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  type: RollingUpdate

## Configure the ingress resource that allows you to access the
## app installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: true

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## Ingress Path type
  ##
  pathType: Prefix

  ingressClassName: nginx

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: ""

  ## The Path to Nginx. You may need to set this to '/*' in order to use this
  ## with ALB ingress controllers.
  ##
  path: /api(.*)

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: true

  ## Specify a tls secret which already exists. tls must be set to true
  ##
  existingTlsSecret:

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: app.local
  ##   path: /
  ## - name: app.local
  ##   path: /
  ##   servicePort: http

  ## Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  extraPaths:

  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - app.local
  ##   secretName: app.local-tls
  ##

  ## Adds location and server snippets annotations for ingress-nginx
  ## Ref: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#configuration-snippet
  ## Ref: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#server-snippet
  ##
  ## nginx:
  ##   serverSnippet: |
  ##     ## Redirect mobile
  ##     set $agentflag 0;
  ##     if ($http_user_agent ~* "(Mobile)" ){
  ##       set $agentflag 1;
  ##     }
  ##     if ( $agentflag = 1 ) {
  ##       return 301 https://m.example.com;
  ##     }
  nginx:
    configurationSnippet:
    serverSnippet:

extraIngress:
  enabled: false
  
##  We usually recommend not to specify default resources and to leave this as a conscious
##  choice for the user. This also increases chances charts run on environments with little
##  resources, such as Minikube. If you do want to specify resources, uncomment the following
##  lines, adjust them as necessary, and remove the curly braces after 'resources:'.
##
resources:
  limits:
    cpu: 2
    memory: 3Gi
  requests:
    cpu: 500m
    memory: 3Gi

## Autoscaling configuration
##
## Example:
## autoscaling:
##   enabled: true
##   minReplicas: 1
##   maxReplicas: 10
##   metrics:
##     - type: Resource
##       resource:
##         name: cpu
##         target:
##           type: Utilization
##           averageUtilization: 80
##     - type: Resource
##       resource:
##        name: memory
##        target:
##           type: AverageValue
##           averageValue: 1800Mi
##   behavior:
##     scaleDown:
##       stabilizationWindowSeconds: 300
##
autoscaling:
  enabled: false

nodeSelector: {}
tolerations: []
topologySpreadConstraints: []

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## An array to add env vars
## For example:
## env:
##  - name: TEST_VAR
##    value: test
##
env: {}

## Array of sources to populate environment variables in the container from
## Ref: https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#envfromsource-v1-core
##
## envFrom:
##   - configMapRef:
##       name: special-config
##   - secretRef:
##       name: '{{ include "app.fullname" . }}-env'
##
envFrom:
- secretRef:
      name: '{{ include "app.fullname" . }}'

## Array to add volumes
## Ref: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#Volume
## - name: storage
##   persistentVolumeClaim:
##     claimName: claimName
##
# fix for readOnlyRootFilesystem /tmp/spring.log
volumes:
- name: tmpfs-1
  emptyDir: {}

## Array to add volume mounts (normally used with volumes)
## Ref: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#volumes-2
## - mountPath: /parentdir/subdir
##   name: storage
##   subPath: dirUnderMountPath/subdir
##
volumeMounts:
  - mountPath: /tmp
    name: tmpfs-1

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
##
persistence:
  enabled: false
  ## Application data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /data

## Configure options for liveness and readiness probes
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## Note: probes are disabled by default and have no checks defined
##
livenessProbe:
  enabled: true
  httpGet:
    path: /api/v1/ping
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 2
  successThreshold: 1
readinessProbe:
  enabled: false
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
startupProbe:
  enabled: true
  httpGet:
    path: /api/v1/ping
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 20
  successThreshold: 1

## Populate сonfigMaps for the application
##
## configMaps:
##   app:
##     data:
##       dbURL: {{ .Values.dbUser }}@{{ .Values.dbPassword }}:{{ .Values.dbPort }}
##
## The above example will create a configMap with name common.names.fullname-app
## 
## configMaps:
##   '{{ include "app.fullname" . }}':
##     data:
##       test.xml: |-
##         <?xml version="1.0" encoding="UTF-8"?>
##         <configuration>
##           <property name="test"/>
##         </configuration>
##
## The above example will create a configMap with name common.names.fullname
##
configMaps: {}

## Populate secrets for the application
##
## secrets:
##   db:
##     stringData:
##       DB_USER: '{{ .Values.dbUser }}'
##       DB_PASSWORD: '{{ .Values.dbPassword }}'
##   b64:
##     data:
##       DB_HOST: base64-encoded-value
##
## The above example will create two secrets db and b64
## (prefixed with {{ template "app.fullname" $ }}-).
##
secrets: {}

## Sync objects from Azure keyvault to Kubernetes as secrets
##
##   sync-1:
##    vaultname: azurekeyvaltname # name of the azure keyvault
##    objectname: test-secret # secretname stored in AKV
##    objecttype: secret # objecttype in AKV
##    output: 
##      transform: # optional transformers executed in listed order
##      - trim # optional - trims empty space
##      - base64encode # optional - encode to base64
##      - base64decode # optional - decode from base64
##      secret: 
##        name: testsecret # secretname to create in kubernetes or use '{{ include "app.fullname" . }}' as value
##        dataKey: TEST_SECRET #key to store in secret
##
## The above example will create 1 secret in Kubernetes from Azure keyvault
## Supported vault object types: secret, certificate, key, multi-key-value-secret
##
syncAKV: {}

## PodDisruptionBudget configuration
##
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable: 1

## Array of templates paths to automatically adds checksum annotation for
## (ex: checksum/secrets.yaml: **sha256sum**)
##
## checksums:
##   - secrets.yaml
##
checksums: []

## Add extra list of kubernetes objects to deploy (value evaluted as a template)
##
## - apiVersion: v1
##   kind: Pod
##   metadata:
##     name: nginx
##   spec:
##    containers:
##    - name: nginx
##      image: nginx:1.14.2
##      ports:
##      - containerPort: 80
##
## The above example will create 1 extra object: pod
##
extraObjects: []

tests:
  httpChecks:
    default: false