global:
  # -- (object) Global Docker image parameters.<br>
  # @notationType -- yaml
  # Please, note that this will override the image parameters, including dependencies, configured to use the global value.<br>
  # Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass.
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

image:
  # -- Set image registry.
  registry: "crzgwpweu01.azurecr.io"
  # -- Set image repository.
  repository: camunda/camunda-bpm-platform
  # -- Set image tag.
  tag:
  # -- Set image fullImage. Can be used to set the complete URL.
  fullImage: [] # use this from pipeline, includes registry, repo, and tag
  # -- Optionally specify an array of imagePullSecrets.<br>
  # Secrets must be manually created in the namespace.<br>
  # ref: <a href="https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/">[link]</a>
  pullSecrets: []
  pullPolicy: Always

# -- Specifies the application name (required to be set).
name: "camunda-bpm-platform"
replicaCount: 1

# -- Specifies the application resource kind.
appKind: Deployment

podLabels:
  public-access: allow

args: []
# -- String to partially override common.names.fullname template (will maintain the release name).
nameOverride: ""
# -- String to fully override common.names.fullname template.
fullnameOverride: ""
# -- Deployment pod host aliases.<br>
# ref: <a href="https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/">[link]</a>
hostAliases: []
# -- Controls whether the pod may use the node network namespace.<br>
# ref: <a href="https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces">[link]</a>
hostNetwork: false

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: false
  # -- Annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use.<br>
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # -- Controls whether the container automatically mounts the ServiceAccount's API credentials.<br>
  # In the serviceaccount/v1 this defaults to true, so also in this Helm chart. recommended: false.<br>
  # ref: <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting">[link]</a>
  automountServiceAccountToken: true

# -- Add labels to all the deployed resources.
commonLabels: {}
# -- Add annotations to all the deployed resources.
commonAnnotations: {}
# -- Pod annotations.<br>
# ref: <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/">[link]</a>
podAnnotations: {}

initContainers:
  # -- Add init containers to the Pod.
  # @raw
  # <details>
  # <summary>+Expand</summary>
  #
  # ```yaml
  # - name: your-image-name
  #   image: your-image
  #   imagePullPolicy: Always
  #   ports:
  #   - name: portname
  #     containerPort: 1234
  # ```
  # </details>
  - name: copy-config
    image: busybox
    command: ['sh', '-c', 'cp /tempconfig/* /camunda/configuration/resources/']
    volumeMounts:
      - name: dmns
        mountPath: /tempconfig/
      - name: configdir
        mountPath: /camunda/configuration/resources/

priorityClassName: ""
# -- Optionally, change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.<br>
# By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller 
# to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
dnsPolicy: ClusterFirst

podSecurityContext:
  # -- (object) Pod securityContext.<br>
  # @notationType -- yaml
  # ref: <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod">[link]</a>
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

containerSecurityContext:
  # -- (object) Container security context.
  # @notationType -- yaml
  # @raw
  # <details>
  # <summary>+Expand</summary>
  #
  # ```yaml
  # containerSecurityContext:
  #   capabilities:
  #     drop:
  #     - ALL
  #   readOnlyRootFilesystem: true
  #   runAsNonRoot: true
  #   runAsUser: 1000
  #   allowPrivilegeEscalation: false
  # ```
  # </details>
  # ref: <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container">[link]</a>
  enabled: true
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000

containerPorts: []
service:
  # -- Kubernetes service type and port number.
  type: ClusterIP
  port: 8080
  targetPort: 8080
  # -- Provide any additional service annotations.<br>
  annotations: {}
  # -- Provide any additional service labels.<br>
  labels: {}
  ports: []

sidecar: {}

updateStrategy:
  # -- (object) Set up update strategy for installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pod to ensure the pods are destroyed first.
  # @notationType -- yaml
  # @raw
  # <details>
  # <summary>+Expand</summary>
  #
  # ```yaml
  # updateStrategy:
  #  type: RollingUpdate
  #  rollingUpdate:
  #    maxSurge: 25%
  #    maxUnavailable: 25%
  # ```
  # </details>
  type: RollingUpdate

ingress:
  enabled: false
  certManager: false
  pathType: Prefix
  apiVersion: ""
  hostname: ""
  path: /*
  ingressClassName: ""
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
  tls: true
  existingTlsSecret: ""
  extraHosts: []
  extraPaths: []
  extraTls: []
  nginx:
    configurationSnippet:
    serverSnippet:

extraIngress:
  enabled: false
  nameSuffix: "-ext"
  certManager: false
  pathType: Prefix
  apiVersion: ""
  hostname: ""
  path: /
  pathType: Prefix
  ingressClassName: ""
  annotations:
    kubernetes.io/ingress.class: 'azure/application-gateway'
    appgw.ingress.kubernetes.io/ssl-redirect: 'true'
  tls: true
  existingTlsSecret:
  extraHosts: []
  extraPaths: []
  extraTls: []

resources:
  limits:
    cpu: 2
  requests:
    cpu: 500m
    memory: 3Gi

autoscaling:
  enabled: false

nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []

affinity: {}
envFrom: []
volumes:
  # -- Array of volumes for the application.<br>
  # These volumes are mounted to enable data persistence and configuration loading.
  - name: tmpfs-1
    # -- Temporary emptyDir volume for /tmp.<br>
    # Useful for storing transient files needed during runtime.
    emptyDir: {}
  - name: dmns
    # -- ConfigMap volume for DMN files.<br>
    # Loads external configuration for decision model files used by the application.
    configMap:
      name: dmnfiles
  - name: configdir
    # -- Temporary emptyDir volume for Camunda configuration resources.<br>
    # Provides an empty volume for runtime configuration adjustments.
    emptyDir: {}
  - name: camunda-logs
    # -- Temporary emptyDir volume for Camunda logs.<br>
    # Ensures logging data is stored in a non-persistent volume.
    emptyDir: {}
  - name: camunda-work
    # -- Temporary emptyDir volume for Camunda work files.<br>
    # Used for transient data storage during application runtime.
    emptyDir: {}

volumeMounts:
  # -- (list) Array to add volume mounts (normally used with volumes).
  # @notationType -- yaml
  # @raw
  #
  # <details>
  # <summary>+Expand</summary>
  #
  # ```yaml
  # - mountPath: /parentdir/subdir
  #   name: storage
  #   subPath: dirUnderMountPath/subdir
  # ```
  # </details>
  # ref: <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#volumes-2">[link]</a>
  - mountPath: /tmp
    # -- Mounts the tmpfs-1 volume to /tmp within the container.<br>
    # Used for temporary, non-persistent storage in the /tmp directory.
    name: tmpfs-1
  - mountPath: /tempconfig
    # -- Mounts the dmns ConfigMap volume to /tempconfig.<br>
    # Provides external configuration files for decision model handling.
    name: dmns
  - mountPath: /camunda/configuration/resources/
    # -- Mounts the configdir volume to the /camunda/configuration/resources directory.<br>
    # Used for loading runtime configurations needed by the application.
    name: configdir
  - mountPath: /camunda/logs
    # -- Mounts the camunda-logs volume to the /camunda/logs directory in the container.<br>
    # Ensures that logging data is stored temporarily for debugging and runtime checks.
    name: camunda-logs
  - mountPath: /camunda/work
    # -- Mounts the camunda-work volume to the /camunda/work directory in the container.<br>
    # Used for temporary work files generated and deleted during application runtime.
    name: camunda-work

persistence:
  enabled: false
  storageClass:
  existingClaim: ""
  accessMode: ReadWriteMany

startupProbe:
  failureThreshold: 20
  successThreshold: 1

configMaps: {}
secrets: {}
syncAKV: {}
podDisruptionBudget:
  enabled: false
  minAvailable: 1

checksums: []
extraObjects: []
tests:
  httpChecks:
    default: false

general:
  # -- Enable or disable debug mode for the application.<br>
  # Defaults to 'false' to prevent excessive logging in production.<br>
  debug: false

env:
  # -- Array of environment variables to configure application settings.<br>
  # Customize values as needed for the target environment.
  - name: CAMUNDA_HOST_URL
    # -- URL for Camunda host.<br>
    # Example: "http://camunda.example.com"<br>
    value: "{{ .Values.camunda.host }}"

  - name: KEYCLOAK_HOST
    # -- URL for Keycloak host.<br>
    # Example: "http://keycloak.example.com"<br>
    value: "{{ .Values.keycloak.host }}"

  - name: KEYCLOAK_REALM
    # -- Keycloak realm to be used for authentication.<br>
    # This should match the configured realm in Keycloak.<br>
    value: "{{ .Values.keycloak.realm }}"

  - name: KEYCLOAK_CLIENT_ID
    # -- Keycloak client ID for the application.<br>
    # Example: "my-app-client-id"<br>
    value: "{{ .Values.keycloak.clientId }}"

  - name: KEYCLOAK_CLIENT_SECRET
    # -- Keycloak client secret reference.<br>
    # Uses Kubernetes secret reference.<br>
    valueFrom:
      secretKeyRef:
        name: "{{ .Values.keycloak.clientSecret.name }}"
        key: "{{ .Values.keycloak.clientSecret.key }}"

  - name: PLUGIN_IDENTITY_KEYCLOAK_KEYCLOAKISSUERURL
    # -- Issuer URL for Keycloak realm.<br>
    # Example: "http://keycloak.example.com/realms/myrealm"<br>
    value: "{{ .Values.keycloak.host }}/realms/{{ .Values.keycloak.realm }}"

  - name: PLUGIN_IDENTITY_KEYCLOAK_KEYCLOAKADMINURL
    # -- Admin URL for Keycloak realm.<br>
    # Example: "http://keycloak.example.com/admin/realms/myrealm"<br>
    value: "{{ .Values.keycloak.host }}/admin/realms/{{ .Values.keycloak.realm }}"

  - name: PLUGIN_IDENTITY_KEYCLOAK_CLIENTID
    # -- Client ID for Keycloak integration.<br>
    # Used by plugins to authenticate with Keycloak.<br>
    value: "{{ .Values.keycloak.clientId }}"

  - name: PLUGIN_IDENTITY_KEYCLOAK_CLIENTSECRET
    # -- Client secret reference for Keycloak.<br>
    # Uses Kubernetes secret reference.<br>
    valueFrom:
      secretKeyRef:
        name: "{{ .Values.keycloak.clientSecret.name }}"
        key: "{{ .Values.keycloak.clientSecret.key }}"

command:
  # -- Command to start the Camunda application.<br>
  # This is the main entrypoint command for the container.
  - './camunda.sh'

args:
  # -- Arguments passed to the Camunda start command.<br>
  # Configures application features (e.g., webapps, REST API, OAuth2 support).
  - '--webapps'
  - '--rest'
  - '--webapps'
  - '--oauth2'

livenessProbe:
  enabled: true
  httpGet:
    path: /engine-rest/engine
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /engine-rest/engine
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /engine-rest/engine
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1

camunda:
  # -- Configuration for Camunda-specific settings.<br>
  host: ""

keycloak:
  # -- Configuration for Keycloak settings.<br>
  host: ""
  realm: ""
  clientId: ""
  clientSecret:
    name: ""
    key: ""
