global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

image:
  repository: camunda/camunda-bpm-platform
  registry: "crzgwpweu01.azurecr.io"
  tag:
  fullImage: []
  pullSecrets: []
  pullPolicy: Always

name: "camunda-bpm-platform"
replicaCount: 1
appKind: Deployment

podLabels:
  public-access: allow

args: []
nameOverride: ""
fullnameOverride: ""
hostAliases: []
hostNetwork: false

serviceAccount:
  create: false
  annotations: {}
  name: ""
  automountServiceAccountToken: true

commonLabels: {}
commonAnnotations: {}
podAnnotations: {}

podLabels:
  public-access: allow

initContainers:
  - name: copy-config
    image: busybox
    command: ['sh', '-c', 'cp /tempconfig/* /camunda/configuration/resources/']
    volumeMounts:
      - name: dmns
        mountPath: /tempconfig/
      - name: configdir
        mountPath: /camunda/configuration/resources/

priorityClassName: ""
dnsPolicy: ClusterFirst

podSecurityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000

containerPorts: []
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}
  labels: {}
  ports: []

sidecar: {}

updateStrategy:
  type: RollingUpdate

ingress:
  enabled: false
  certManager: false
  pathType: Prefix
  apiVersion: ""
  hostname: ""
  path: /*
  ingressClassName: ""
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
  tls: true
  existingTlsSecret: ""
  extraHosts: []
  extraPaths: []
  extraTls: []

extraIngress:
  enabled: false
  nameSuffix: "-ext"
  certManager: false
  pathType: Prefix
  apiVersion: ""
  hostname: ""
  path: /
  pathType: Prefix
  ingressClassName: ""
  annotations:
    kubernetes.io/ingress.class: 'azure/application-gateway'
    appgw.ingress.kubernetes.io/ssl-redirect: 'true'
  tls: true
  existingTlsSecret:
  extraHosts: []
  extraPaths: []
  extraTls: []

resources:
  limits:
    cpu: 2 # KIJK HIER NAAR, zet ook memory (iets logisch inschatten; staat dit in oude helm chart?)
  requests:
    cpu: 500m
    memory: 3Gi

autoscaling:
  enabled: false

nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []

affinity: {}
envFrom: []
volumes:
  - name: tmpfs-1
    emptyDir: {}
  - name: dmns
    mountPath: /tempconfig/
  - name: configdir
    mountPath: /camunda/configuration/resources/
  - name: camunda-logs
    mountPath: /camunda/logs
  - name: camunda-work
    mountPath: /camunda/work
volumeMounts:
  - mountPath: /tmp
    name: tmpfs-1
  - name: configdir
    emptyDir: {}
  - name: dmns
    configMap:
      name: dmnfiles
  - name: camunda-logs
    emptyDir: {}
  - name: camunda-work
    emptyDir: {}

persistence:
  enabled: false
  storageClass:
  existingClaim: ""
  accessMode: ReadWriteMany

startupProbe:
  failureThreshold: 20
  successThreshold: 1

configMaps: {}
secrets: {}
syncAKV: {}
podDisruptionBudget:
  enabled: false
  minAvailable: 1

checksums: []
extraObjects: []
tests:
  httpChecks:
    default: false

general:
  debug: false

env:
  - name: CAMUNDA_HOST_URL
    value: "{{ .Values.camunda.host }}"
  - name: KEYCLOAK_HOST
    value: "{{ .Values.keycloak.host }}"
  - name: KEYCLOAK_REALM
    value: "{{ .Values.keycloak.realm }}"
  - name: KEYCLOAK_CLIENT_ID
    value: "{{ .Values.keycloak.clientId }}"
  - name: KEYCLOAK_CLIENT_SECRET
    valueFrom:
      secretKeyRef:
        name: "{{ .Values.keycloak.clientSecret.name }}"
        key: "{{ .Values.keycloak.clientSecret.key }}"
  - name: PLUGIN_IDENTITY_KEYCLOAK_KEYCLOAKISSUERURL
    value: "{{ .Values.keycloak.host }}/realms/{{ .Values.keycloak.realm }}"
  - name: PLUGIN_IDENTITY_KEYCLOAK_KEYCLOAKADMINURL
    value: "{{ .Values.keycloak.host }}/admin/realms/{{ .Values.keycloak.realm }}"
  - name: PLUGIN_IDENTITY_KEYCLOAK_CLIENTID
    value: "{{ .Values.keycloak.clientId }}"
  - name: PLUGIN_IDENTITY_KEYCLOAK_CLIENTSECRET
    valueFrom:
      secretKeyRef:
        name: "{{ .Values.keycloak.clientSecret.name }}"
        key: "{{ .Values.keycloak.clientSecret.key }}"

command: ['./camunda.sh']
args: ['--webapps', '--rest', '--webapps', '--oauth2']

livenessProbe:
  enabled: true
  httpGet:
    path: /engine-rest/engine
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /engine-rest/engine
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /engine-rest/engine
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1

camunda:
  host: ""

keycloak:
  host: ""
  realm: ""
  clientId: ""
  clientSecret:
    name: ""
    key: ""
