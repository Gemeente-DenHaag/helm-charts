## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

# Testing with global values
global:
  keycloakUrl: "https://keycloak-zgw.test.denhaag.nl"

image:
  registry: "crzgwpweu01.azurecr.io"
  repository: "zgw/klantportaal"
  tag: 
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always

## Specifies the application name (required to be set)
##
name: "klantportaal"

## Specifies the application resource kind
##
appKind: Deployment

## Controls whether the container automatically mounts the ServiceAccount's API credentials
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
automountServiceAccountToken: false

serviceAccount:
  ## Specifies whether a service account should be created
  ##
  create: false
  ## Annotations to add to the service account
  ##
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:
  ## Controls whether the container automatically mounts the ServiceAccount's API credentials
  ## In the serviceaccount/v1 this defaults to true, so also in this helm chart. recommended: false
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
  automountServiceAccountToken: true

## Optionally, change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
## By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
## to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
##
dnsPolicy: ClusterFirst

## An array to add env vars. For env variables for config.js see config: in values-(env).yaml
## For example:
## env:
##  - name: TEST_VAR
##    value: test
##
env:
    - name: TZ
      value: Europe/Amsterdam

## This will generate the config.js to use in klantportaal
configMaps:
  '{{ include "app.fullname" . }}':
    data:
      config.js: |-
        {{- range $k, $v := .Values.config }}
        window.{{ $k}} = '{{ include "common.tplvalues.render" (dict "value" $v "context" $) }}';
        {{- end }}

# Volume for config.js and emptyDir for nginx tmp folder
volumes:
- name: config-js-vol
  configMap:
    name: '{{ include "app.fullname" . }}'
- name: tmpfs-1
  emptyDir: {}

# Mount config.js to nginx path and mount tmp for nginx
volumeMounts:
  - mountPath: /usr/share/nginx/html/config.js
    name: config-js-vol
    subPath: config.js
  - mountPath: /tmp
    name: tmpfs-1

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
##
persistence:
  enabled: false
  ## Application data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /data

checksums:
  - configmaps.yaml

## Pod securityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

## Container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
## containerSecurityContext:
##   capabilities:
##     drop:
##     - ALL
##   readOnlyRootFilesystem: true
##   runAsNonRoot: true
##   runAsUser: 1001
##   allowPrivilegeEscalation: false
##
containerSecurityContext:
  enabled: true
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

## Application service parameters
##
service:
  ## Kubernetes service type and port number
  ##
  type: ClusterIP
  # clusterIP: None

  ## Specify the default service port and targetPort
  ## Note: port or ports must be provided to enable service!
  ##
  port: 8080
  targetPort: 8080


## Set up update strategy for Kibana installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to makesure the pods are destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  type: RollingUpdate

## Configure the ingress resource that allows you to access the
## app installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: true
  hostname: ""

  ## Ingress Path type
  ##
  pathType: Prefix

  ingressClassName: nginx

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  ## The Path to Nginx. You may need to set this to '/*' in order to use this
  ## with ALB ingress controllers.
  ##
  path: /(.*)

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: true

  ## Adds location and server snippets annotations for ingress-nginx
  ## Ref: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#configuration-snippet
  ## Ref: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#server-snippet
  ##
  ## nginx:
  ##   serverSnippet: |
  ##     ## Redirect mobile
  ##     set $agentflag 0;
  ##     if ($http_user_agent ~* "(Mobile)" ){
  ##       set $agentflag 1;
  ##     }
  ##     if ( $agentflag = 1 ) {
  ##       return 301 https://m.example.com;
  ##     }
  nginx:
    configurationSnippet:
    serverSnippet:

##  We usually recommend not to specify default resources and to leave this as a conscious
##  choice for the user. This also increases chances charts run on environments with little
##  resources, such as Minikube. If you do want to specify resources, uncomment the following
##  lines, adjust them as necessary, and remove the curly braces after 'resources:'.
##
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

## Autoscaling configuration
##
## Example:
## autoscaling:
##   enabled: true
##   minReplicas: 1
##   maxReplicas: 10
##   metrics:
##     - type: Resource
##       resource:
##         name: cpu
##         target:
##           type: Utilization
##           averageUtilization: 80
##     - type: Resource
##       resource:
##        name: memory
##        target:
##           type: AverageValue
##           averageValue: 1800Mi
##   behavior:
##     scaleDown:
##       stabilizationWindowSeconds: 300
##
autoscaling:
  enabled: false

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## Configure options for liveness and readiness probes
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## Note: probes are disabled by default and have no checks defined
##
livenessProbe:
  enabled: true
  httpGet:
    path: /index.html
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 2
  failureThreshold: 2
  successThreshold: 1
readinessProbe:
  enabled: true
  httpGet:
    path: /index.html
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 2
  failureThreshold: 2
  successThreshold: 1
startupProbe:
  enabled: false
  httpGet:
    path: /index.html
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 2
  successThreshold: 1

## PodDisruptionBudget configuration
##
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable: 1